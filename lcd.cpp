#include "lcd.h"

#include "tetromino.h"

#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

#include <Arduino.h>

#include <avr/pgmspace.h>

#include <stdint.h>

static constexpr uint8_t CONTRAST = 64;
static constexpr uint8_t BIAS = 4;

static constexpr int8_t SPLASH_OX = 0;
static constexpr int8_t SPLASH_OY = 10;

static constexpr uint8_t SPLASH_W = LCDHEIGHT - 2 * SPLASH_OX;
static constexpr uint8_t SPLASH_H = LCDWIDTH - 2 * SPLASH_OY;

static uint8_t const SPLASH[] PROGMEM = {
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x12, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x15, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x22, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
  0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x01,
  0xbf, 0xf7, 0xdf, 0xfb, 0xe2, 0x39,
  0x83, 0x04, 0x01, 0x83, 0x1a, 0xc5,
  0x93, 0x24, 0x09, 0x93, 0x1a, 0xc5,
  0xab, 0x54, 0x15, 0xab, 0x1a, 0xc1,
  0xab, 0x27, 0x15, 0x93, 0xe2, 0x39,
  0xa8, 0x04, 0x14, 0x03, 0x22, 0x05,
  0xa9, 0xe4, 0x17, 0xf3, 0x1a, 0xc5,
  0xaa, 0x14, 0x10, 0x0b, 0x1a, 0xc5,
  0x91, 0xe7, 0xcf, 0xf3, 0x1a, 0x39,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x13, 0x32, 0x00, 0x00, 0x00,
  0x00, 0x13, 0x32, 0x3f, 0xff, 0xc0,
  0x00, 0x1f, 0xfe, 0x26, 0x66, 0x40,
  0x00, 0x01, 0xe0, 0x26, 0x66, 0x40,
  0x00, 0x01, 0x20, 0x3f, 0xff, 0xc0,
  0x00, 0x01, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xe0, 0x00, 0x00, 0x00,
  0x0f, 0xf0, 0x00, 0x00, 0x3c, 0x00,
  0x09, 0x90, 0x00, 0x00, 0x24, 0x00,
  0x09, 0x90, 0x00, 0x00, 0x24, 0x00,
  0x0f, 0xf0, 0x00, 0x00, 0x3c, 0x00,
  0x00, 0xff, 0x00, 0x00, 0x3c, 0x00,
  0x00, 0x99, 0x00, 0x00, 0x24, 0x00,
  0x00, 0x99, 0x00, 0x00, 0x24, 0x00,
  0x00, 0xff, 0x00, 0x00, 0x3c, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xfc, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x64, 0x00,
  0x00, 0x00, 0x0f, 0xf2, 0x64, 0x00,
  0x01, 0xe0, 0x09, 0x93, 0xfc, 0x00,
  0x01, 0x20, 0x09, 0x90, 0x00, 0x00,
  0x01, 0x20, 0x0f, 0xf0, 0x00, 0x00,
  0x01, 0xe0, 0xff, 0x00, 0x7f, 0x80,
  0x01, 0xe0, 0x99, 0x00, 0x4c, 0x80,
  0x01, 0x20, 0x99, 0x00, 0x4c, 0x80,
  0x01, 0x20, 0xff, 0x00, 0x7f, 0x80,
  0x01, 0xe0, 0x00, 0x00, 0x7f, 0x80,
  0x01, 0xfe, 0x00, 0x00, 0x4c, 0x80,
  0x01, 0x32, 0x00, 0x00, 0x4c, 0x80,
  0x01, 0x32, 0x00, 0x00, 0x7f, 0x80,
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x00,
};

static constexpr int8_t OVER_OX = 0;
static constexpr int8_t OVER_OY = 2;

static constexpr uint8_t OVER_W = LCDHEIGHT - 2 * OVER_OX;
static constexpr uint8_t OVER_H = LCDWIDTH - 2 * OVER_OY;

static uint8_t const OVER[] PROGMEM = {
  0x00, 0xf0, 0x7c, 0x78, 0xf3, 0xe0,
  0x01, 0xf8, 0x7c, 0x78, 0xf3, 0xe0,
  0x03, 0x9c, 0x6c, 0x78, 0xf3, 0x80,
  0x03, 0x9c, 0x6c, 0x7d, 0xf3, 0x80,
  0x03, 0x9c, 0x6c, 0x7d, 0xf3, 0x80,
  0x03, 0x80, 0xee, 0x75, 0x73, 0x80,
  0x03, 0xbc, 0xee, 0x75, 0x73, 0xe0,
  0x03, 0xbc, 0xee, 0x77, 0x73, 0xe0,
  0x03, 0x9c, 0xc6, 0x77, 0x73, 0x80,
  0x03, 0x9c, 0xfe, 0x77, 0x73, 0x80,
  0x03, 0x9c, 0xfe, 0x77, 0x73, 0x80,
  0x03, 0x9d, 0xc7, 0x77, 0x73, 0x80,
  0x01, 0xfd, 0xc7, 0x77, 0x73, 0xf0,
  0x00, 0xed, 0xc7, 0x77, 0x73, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
  0xf0, 0xf0, 0x00, 0x00, 0x00, 0xf0,
  0xf0, 0xf0, 0x00, 0x00, 0x00, 0xf0,
  0xf0, 0xf0, 0x00, 0x00, 0x00, 0xf0,
  0xf0, 0xf0, 0x00, 0x00, 0x0f, 0x0f,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x0f,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x0f,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x0f,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0xf0, 0x00, 0x0f, 0x00, 0x00,
  0xf0, 0xf0, 0x00, 0x09, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x09, 0x99, 0x00, 0x00,
  0x00, 0x00, 0x09, 0x99, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00,
  0x00, 0x00, 0x26, 0x66, 0x40, 0x00,
  0x00, 0x00, 0x26, 0x66, 0x40, 0x00,
  0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00,
  0x00, 0x3f, 0xc0, 0x00, 0x3c, 0x00,
  0x00, 0x26, 0x40, 0x00, 0x24, 0x00,
  0x00, 0x26, 0x40, 0x00, 0x24, 0x00,
  0x00, 0x3f, 0xc0, 0x00, 0x3c, 0x00,
  0x03, 0xfc, 0x00, 0x00, 0x3c, 0x00,
  0x02, 0x64, 0x00, 0x00, 0x24, 0x00,
  0x02, 0x64, 0x00, 0x00, 0x24, 0x00,
  0x03, 0xfc, 0x00, 0x00, 0x3c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x26, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x26, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x78, 0xe3, 0xbe, 0x7f, 0x00,
  0x00, 0xfc, 0xe3, 0xbe, 0x7f, 0x80,
  0x01, 0xce, 0xe3, 0xb8, 0x73, 0x80,
  0x01, 0xce, 0x77, 0x38, 0x73, 0x80,
  0x01, 0xce, 0x77, 0x38, 0x73, 0x80,
  0x01, 0xce, 0x77, 0x38, 0x7f, 0x80,
  0x01, 0xce, 0x77, 0x3e, 0x7f, 0x00,
  0x01, 0xce, 0x77, 0x3e, 0x73, 0x80,
  0x01, 0xce, 0x77, 0x38, 0x73, 0x80,
  0x01, 0xce, 0x36, 0x38, 0x73, 0x80,
  0x01, 0xce, 0x36, 0x38, 0x73, 0x80,
  0x01, 0xce, 0x3e, 0x38, 0x73, 0x80,
  0x00, 0xfc, 0x3e, 0x3f, 0x73, 0x80,
  0x00, 0x78, 0x3e, 0x3f, 0x73, 0x80,
};

/**
 * NOTE regarding hardware SPI
 * 
 * In Adafruit_PCD8544.h, set `PCD8544_SPI_CLOCK_DIV` to `SPI_CLOCK_DIV8`
 * for 2MHz SPI instead of the default `SPI_CLOCK_DIV16` for 4MHz SPI, as
 * that is too fast for this specific PCD8544 LCD.
 * 
 * Also note that sometimes hardware SPI acts erratically and the LCD
 * starts displaying corrupted data.
 */
Adafruit_PCD8544 lcd = Adafruit_PCD8544(
  // LCD_CLK, LCD_DIN, // comment for hardware SPI / leave uncommented for software SPI
  LCD_DC, LCD_CE, LCD_RST
);

void setupLCD() {
  pinMode(LCD_BKL, OUTPUT);

  lcd.begin(CONTRAST, BIAS);

  lcd.setRotation(3);

  for (uint8_t c = 0; c <= 127; ++c) {
    lcd.setContrast(c);
  }

  lcd.setContrast(CONTRAST);

  lcdSplash();
}

void lcdSplash() {
  lcd.clearDisplay();

  lcd.drawBitmap(SPLASH_OX, SPLASH_OY, SPLASH, SPLASH_W, SPLASH_H, TET_CL1);

  lcd.display();
}

void lcdOver() {
  lcd.clearDisplay();

  lcd.drawBitmap(OVER_OX, OVER_OY, OVER, OVER_W, OVER_H, TET_CL1);

  lcd.display();
}
